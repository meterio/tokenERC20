/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RateLimiter {
  export type TokenBucketStruct = {
    tokens: BigNumberish;
    lastUpdated: BigNumberish;
    isEnabled: boolean;
    capacity: BigNumberish;
    rate: BigNumberish;
  };

  export type TokenBucketStructOutput = [
    tokens: bigint,
    lastUpdated: bigint,
    isEnabled: boolean,
    capacity: bigint,
    rate: bigint
  ] & {
    tokens: bigint;
    lastUpdated: bigint;
    isEnabled: boolean;
    capacity: bigint;
    rate: bigint;
  };
}

export declare namespace ITimelock {
  export type AssetLimiterConfigStruct = {
    asset: AddressLike;
    capacity: BigNumberish;
    isEnabled: boolean;
  };

  export type AssetLimiterConfigStructOutput = [
    asset: string,
    capacity: bigint,
    isEnabled: boolean
  ] & { asset: string; capacity: bigint; isEnabled: boolean };

  export type UserAgreementStruct = {
    isFrozen: boolean;
    asset: AddressLike;
    beneficiary: AddressLike;
    timestamp: BigNumberish;
    id: BigNumberish;
    amount: BigNumberish;
  };

  export type UserAgreementStructOutput = [
    isFrozen: boolean,
    asset: string,
    beneficiary: string,
    timestamp: bigint,
    id: bigint,
    amount: bigint
  ] & {
    isFrozen: boolean;
    asset: string;
    beneficiary: string;
    timestamp: bigint;
    id: bigint;
    amount: bigint;
  };
}

export interface TimelockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ADMIN"
      | "EXECUTOR_ROLE"
      | "PROPOSER_ROLE"
      | "agreementCount"
      | "agreements"
      | "balances"
      | "claim"
      | "consumeValue"
      | "consumeValuePreview"
      | "createAgreement"
      | "currentState"
      | "executeAgreement"
      | "freeze"
      | "freezeAgreement"
      | "frozen"
      | "getMinWaitInSeconds"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAgreementMature"
      | "limitWindow"
      | "maxDelay"
      | "renounceRole"
      | "rescueAgreement"
      | "revokeRole"
      | "setAssetLimiter"
      | "setExecutor"
      | "setLimitWindow"
      | "setMaxDelay"
      | "setProposer"
      | "supportsInterface"
      | "unfreeze"
      | "unfreezeAgreement"
      | "userAgreements"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgreementClaimed"
      | "AgreementCreated"
      | "AgreementFrozen"
      | "AgreementRescued"
      | "Initialized"
      | "NewAssetLimiter"
      | "NewLimitWindow"
      | "NewMaxDelay"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TimeLockFrozen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeValuePreview",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgreement",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freezeAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinWaitInSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementMature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitWindow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueAgreement",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetLimiter",
    values: [ITimelock.AssetLimiterConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unfreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unfreezeAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAgreements",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeValuePreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinWaitInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementMature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetLimiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAgreements",
    data: BytesLike
  ): Result;
}

export namespace AgreementClaimedEvent {
  export type InputTuple = [
    agreementId: BigNumberish,
    beneficiary: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    agreementId: bigint,
    beneficiary: string,
    asset: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    agreementId: bigint;
    beneficiary: string;
    asset: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    agreementId: BigNumberish,
    beneficiary: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    agreementId: bigint,
    beneficiary: string,
    asset: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    agreementId: bigint;
    beneficiary: string;
    asset: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementFrozenEvent {
  export type InputTuple = [agreementId: BigNumberish, value: boolean];
  export type OutputTuple = [agreementId: bigint, value: boolean];
  export interface OutputObject {
    agreementId: bigint;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementRescuedEvent {
  export type InputTuple = [
    agreementId: BigNumberish,
    asset: AddressLike,
    originalBeneficiary: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    agreementId: bigint,
    asset: string,
    originalBeneficiary: string,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    agreementId: bigint;
    asset: string;
    originalBeneficiary: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAssetLimiterEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldRate: BigNumberish,
    newRate: BigNumberish,
    oldCapacity: BigNumberish,
    newCapacity: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldRate: bigint,
    newRate: bigint,
    oldCapacity: bigint,
    newCapacity: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldRate: bigint;
    newRate: bigint;
    oldCapacity: bigint;
    newCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewLimitWindowEvent {
  export type InputTuple = [oldWindow: BigNumberish, newWindow: BigNumberish];
  export type OutputTuple = [oldWindow: bigint, newWindow: bigint];
  export interface OutputObject {
    oldWindow: bigint;
    newWindow: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMaxDelayEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeLockFrozenEvent {
  export type InputTuple = [value: boolean];
  export type OutputTuple = [value: boolean];
  export interface OutputObject {
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Timelock extends BaseContract {
  connect(runner?: ContractRunner | null): Timelock;
  waitForDeployment(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGENCY_ADMIN: TypedContractMethod<[], [string], "view">;

  EXECUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PROPOSER_ROLE: TypedContractMethod<[], [string], "view">;

  agreementCount: TypedContractMethod<[], [bigint], "view">;

  agreements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, bigint, bigint] & {
        isFrozen: boolean;
        asset: string;
        beneficiary: string;
        timestamp: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  claim: TypedContractMethod<
    [agreementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  consumeValue: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  consumeValuePreview: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  createAgreement: TypedContractMethod<
    [asset: AddressLike, beneficiary: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  currentState: TypedContractMethod<
    [asset: AddressLike],
    [RateLimiter.TokenBucketStructOutput],
    "view"
  >;

  executeAgreement: TypedContractMethod<
    [agreementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  freeze: TypedContractMethod<[], [void], "nonpayable">;

  freezeAgreement: TypedContractMethod<
    [agreementId: BigNumberish],
    [void],
    "nonpayable"
  >;

  frozen: TypedContractMethod<[], [boolean], "view">;

  getMinWaitInSeconds: TypedContractMethod<
    [agreementId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      _proposer: AddressLike,
      _executor: AddressLike,
      _limitWindow: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isAgreementMature: TypedContractMethod<
    [agreementId: BigNumberish],
    [boolean],
    "view"
  >;

  limitWindow: TypedContractMethod<[], [bigint], "view">;

  maxDelay: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rescueAgreement: TypedContractMethod<
    [agreementIds: BigNumberish[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetLimiter: TypedContractMethod<
    [configs: ITimelock.AssetLimiterConfigStruct[]],
    [void],
    "nonpayable"
  >;

  setExecutor: TypedContractMethod<
    [executor: AddressLike],
    [void],
    "nonpayable"
  >;

  setLimitWindow: TypedContractMethod<
    [newWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDelay: TypedContractMethod<
    [newMaxDelayInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProposer: TypedContractMethod<
    [proposer: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unfreeze: TypedContractMethod<[], [void], "nonpayable">;

  unfreezeAgreement: TypedContractMethod<
    [agreementId: BigNumberish],
    [void],
    "nonpayable"
  >;

  userAgreements: TypedContractMethod<
    [user: AddressLike],
    [ITimelock.UserAgreementStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXECUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROPOSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "agreementCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agreements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, bigint, bigint] & {
        isFrozen: boolean;
        asset: string;
        beneficiary: string;
        timestamp: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[agreementIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "consumeValue"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consumeValuePreview"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [asset: AddressLike, beneficiary: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentState"
  ): TypedContractMethod<
    [asset: AddressLike],
    [RateLimiter.TokenBucketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeAgreement"
  ): TypedContractMethod<[agreementIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezeAgreement"
  ): TypedContractMethod<[agreementId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getMinWaitInSeconds"
  ): TypedContractMethod<[agreementId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      _proposer: AddressLike,
      _executor: AddressLike,
      _limitWindow: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAgreementMature"
  ): TypedContractMethod<[agreementId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescueAgreement"
  ): TypedContractMethod<
    [agreementIds: BigNumberish[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetLimiter"
  ): TypedContractMethod<
    [configs: ITimelock.AssetLimiterConfigStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExecutor"
  ): TypedContractMethod<[executor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLimitWindow"
  ): TypedContractMethod<[newWindow: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDelay"
  ): TypedContractMethod<
    [newMaxDelayInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposer"
  ): TypedContractMethod<[proposer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unfreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfreezeAgreement"
  ): TypedContractMethod<[agreementId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAgreements"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITimelock.UserAgreementStructOutput[]],
    "view"
  >;

  getEvent(
    key: "AgreementClaimed"
  ): TypedContractEvent<
    AgreementClaimedEvent.InputTuple,
    AgreementClaimedEvent.OutputTuple,
    AgreementClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementFrozen"
  ): TypedContractEvent<
    AgreementFrozenEvent.InputTuple,
    AgreementFrozenEvent.OutputTuple,
    AgreementFrozenEvent.OutputObject
  >;
  getEvent(
    key: "AgreementRescued"
  ): TypedContractEvent<
    AgreementRescuedEvent.InputTuple,
    AgreementRescuedEvent.OutputTuple,
    AgreementRescuedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAssetLimiter"
  ): TypedContractEvent<
    NewAssetLimiterEvent.InputTuple,
    NewAssetLimiterEvent.OutputTuple,
    NewAssetLimiterEvent.OutputObject
  >;
  getEvent(
    key: "NewLimitWindow"
  ): TypedContractEvent<
    NewLimitWindowEvent.InputTuple,
    NewLimitWindowEvent.OutputTuple,
    NewLimitWindowEvent.OutputObject
  >;
  getEvent(
    key: "NewMaxDelay"
  ): TypedContractEvent<
    NewMaxDelayEvent.InputTuple,
    NewMaxDelayEvent.OutputTuple,
    NewMaxDelayEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TimeLockFrozen"
  ): TypedContractEvent<
    TimeLockFrozenEvent.InputTuple,
    TimeLockFrozenEvent.OutputTuple,
    TimeLockFrozenEvent.OutputObject
  >;

  filters: {
    "AgreementClaimed(uint256,address,address,uint256,address)": TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;
    AgreementClaimed: TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;

    "AgreementCreated(uint256,address,address,uint256,uint256)": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;

    "AgreementFrozen(uint256,bool)": TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;
    AgreementFrozen: TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;

    "AgreementRescued(uint256,address,address,uint256,address)": TypedContractEvent<
      AgreementRescuedEvent.InputTuple,
      AgreementRescuedEvent.OutputTuple,
      AgreementRescuedEvent.OutputObject
    >;
    AgreementRescued: TypedContractEvent<
      AgreementRescuedEvent.InputTuple,
      AgreementRescuedEvent.OutputTuple,
      AgreementRescuedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAssetLimiter(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      NewAssetLimiterEvent.InputTuple,
      NewAssetLimiterEvent.OutputTuple,
      NewAssetLimiterEvent.OutputObject
    >;
    NewAssetLimiter: TypedContractEvent<
      NewAssetLimiterEvent.InputTuple,
      NewAssetLimiterEvent.OutputTuple,
      NewAssetLimiterEvent.OutputObject
    >;

    "NewLimitWindow(uint48,uint48)": TypedContractEvent<
      NewLimitWindowEvent.InputTuple,
      NewLimitWindowEvent.OutputTuple,
      NewLimitWindowEvent.OutputObject
    >;
    NewLimitWindow: TypedContractEvent<
      NewLimitWindowEvent.InputTuple,
      NewLimitWindowEvent.OutputTuple,
      NewLimitWindowEvent.OutputObject
    >;

    "NewMaxDelay(uint48,uint48)": TypedContractEvent<
      NewMaxDelayEvent.InputTuple,
      NewMaxDelayEvent.OutputTuple,
      NewMaxDelayEvent.OutputObject
    >;
    NewMaxDelay: TypedContractEvent<
      NewMaxDelayEvent.InputTuple,
      NewMaxDelayEvent.OutputTuple,
      NewMaxDelayEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TimeLockFrozen(bool)": TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
    TimeLockFrozen: TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
  };
}
