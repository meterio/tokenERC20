/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IOFTCoreUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "circulatingSupply"
      | "estimateSendFee"
      | "sendFrom"
      | "supportsInterface"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ReceiveFromChain"
      | "SendToChain"
      | "SetUseCustomAdapterParams"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace ReceiveFromChainEvent {
  export type InputTuple = [
    _srcToken: AddressLike,
    _srcChainId: BigNumberish,
    _to: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _srcToken: string,
    _srcChainId: bigint,
    _to: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _srcToken: string;
    _srcChainId: bigint;
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToChainEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _token: AddressLike,
    _from: AddressLike,
    _toAddress: BytesLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _token: string,
    _from: string,
    _toAddress: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _token: string;
    _from: string;
    _toAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUseCustomAdapterParamsEvent {
  export type InputTuple = [_useCustomAdapterParams: boolean];
  export type OutputTuple = [_useCustomAdapterParams: boolean];
  export interface OutputObject {
    _useCustomAdapterParams: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOFTCoreUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): IOFTCoreUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: IOFTCoreUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  circulatingSupply: TypedContractMethod<[], [bigint], "view">;

  estimateSendFee: TypedContractMethod<
    [
      token: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  sendFrom: TypedContractMethod<
    [
      _token: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "circulatingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateSendFee"
  ): TypedContractMethod<
    [
      token: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendFrom"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ReceiveFromChain"
  ): TypedContractEvent<
    ReceiveFromChainEvent.InputTuple,
    ReceiveFromChainEvent.OutputTuple,
    ReceiveFromChainEvent.OutputObject
  >;
  getEvent(
    key: "SendToChain"
  ): TypedContractEvent<
    SendToChainEvent.InputTuple,
    SendToChainEvent.OutputTuple,
    SendToChainEvent.OutputObject
  >;
  getEvent(
    key: "SetUseCustomAdapterParams"
  ): TypedContractEvent<
    SetUseCustomAdapterParamsEvent.InputTuple,
    SetUseCustomAdapterParamsEvent.OutputTuple,
    SetUseCustomAdapterParamsEvent.OutputObject
  >;

  filters: {
    "ReceiveFromChain(address,uint16,address,uint256)": TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;
    ReceiveFromChain: TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;

    "SendToChain(uint16,address,address,bytes,uint256)": TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;
    SendToChain: TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;

    "SetUseCustomAdapterParams(bool)": TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;
    SetUseCustomAdapterParams: TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;
  };
}
