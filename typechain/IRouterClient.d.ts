/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRouterClientInterface extends ethers.utils.Interface {
  functions: {
    "ccipSend(uint64,tuple)": FunctionFragment;
    "getFee(uint64,tuple)": FunctionFragment;
    "getSupportedTokens(uint64)": FunctionFragment;
    "isChainSupported(uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ccipSend",
    values: [
      BigNumberish,
      {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      BigNumberish,
      {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isChainSupported",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ccipSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainSupported",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRouterClient extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRouterClientInterface;

  functions: {
    ccipSend(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ccipSend(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getFee(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      fee: BigNumber;
      0: BigNumber;
    }>;

    "getFee(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      fee: BigNumber;
      0: BigNumber;
    }>;

    getSupportedTokens(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    "getSupportedTokens(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    isChainSupported(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      supported: boolean;
      0: boolean;
    }>;

    "isChainSupported(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      supported: boolean;
      0: boolean;
    }>;
  };

  ccipSend(
    destinationChainSelector: BigNumberish,
    message: {
      receiver: BytesLike;
      data: BytesLike;
      tokenAmounts: { token: string; amount: BigNumberish }[];
      feeToken: string;
      extraArgs: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ccipSend(uint64,(bytes,bytes,tuple[],address,bytes))"(
    destinationChainSelector: BigNumberish,
    message: {
      receiver: BytesLike;
      data: BytesLike;
      tokenAmounts: { token: string; amount: BigNumberish }[];
      feeToken: string;
      extraArgs: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getFee(
    destinationChainSelector: BigNumberish,
    message: {
      receiver: BytesLike;
      data: BytesLike;
      tokenAmounts: { token: string; amount: BigNumberish }[];
      feeToken: string;
      extraArgs: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFee(uint64,(bytes,bytes,tuple[],address,bytes))"(
    destinationChainSelector: BigNumberish,
    message: {
      receiver: BytesLike;
      data: BytesLike;
      tokenAmounts: { token: string; amount: BigNumberish }[];
      feeToken: string;
      extraArgs: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupportedTokens(
    chainSelector: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getSupportedTokens(uint64)"(
    chainSelector: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isChainSupported(
    chainSelector: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isChainSupported(uint64)"(
    chainSelector: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ccipSend(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "ccipSend(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getFee(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedTokens(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getSupportedTokens(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isChainSupported(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isChainSupported(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    ccipSend(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ccipSend(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getFee(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedTokens(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSupportedTokens(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChainSupported(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isChainSupported(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ccipSend(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ccipSend(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFee(uint64,(bytes,bytes,tuple[],address,bytes))"(
      destinationChainSelector: BigNumberish,
      message: {
        receiver: BytesLike;
        data: BytesLike;
        tokenAmounts: { token: string; amount: BigNumberish }[];
        feeToken: string;
        extraArgs: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedTokens(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSupportedTokens(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChainSupported(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isChainSupported(uint64)"(
      chainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
