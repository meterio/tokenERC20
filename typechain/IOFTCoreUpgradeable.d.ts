/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOFTCoreUpgradeableInterface extends ethers.utils.Interface {
  functions: {
    "circulatingSupply()": FunctionFragment;
    "estimateSendFee(address,uint16,bytes,uint256)": FunctionFragment;
    "sendFrom(address,uint16,bytes,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "ReceiveFromChain(address,uint16,address,uint256)": EventFragment;
    "SendToChain(uint16,address,address,bytes,uint256)": EventFragment;
    "SetUseCustomAdapterParams(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceiveFromChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendToChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUseCustomAdapterParams"): EventFragment;
}

export class IOFTCoreUpgradeable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOFTCoreUpgradeableInterface;

  functions: {
    circulatingSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "circulatingSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    estimateSendFee(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nativeFee: BigNumber;
      zroFee: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "estimateSendFee(address,uint16,bytes,uint256)"(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nativeFee: BigNumber;
      zroFee: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    sendFrom(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sendFrom(address,uint16,bytes,uint256)"(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "circulatingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  estimateSendFee(
    token: string,
    _dstChainId: BigNumberish,
    _toAddress: BytesLike,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    nativeFee: BigNumber;
    zroFee: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "estimateSendFee(address,uint16,bytes,uint256)"(
    token: string,
    _dstChainId: BigNumberish,
    _toAddress: BytesLike,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    nativeFee: BigNumber;
    zroFee: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  sendFrom(
    _token: string,
    _dstChainId: BigNumberish,
    _toAddress: BytesLike,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sendFrom(address,uint16,bytes,uint256)"(
    _token: string,
    _dstChainId: BigNumberish,
    _toAddress: BytesLike,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "circulatingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    estimateSendFee(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nativeFee: BigNumber;
      zroFee: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "estimateSendFee(address,uint16,bytes,uint256)"(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nativeFee: BigNumber;
      zroFee: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    sendFrom(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendFrom(address,uint16,bytes,uint256)"(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ReceiveFromChain(
      _srcToken: string | null,
      _srcChainId: BigNumberish | null,
      _to: string | null,
      _amount: null
    ): EventFilter;

    SendToChain(
      _dstChainId: BigNumberish | null,
      _token: string | null,
      _from: string | null,
      _toAddress: null,
      _amount: null
    ): EventFilter;

    SetUseCustomAdapterParams(_useCustomAdapterParams: null): EventFilter;
  };

  estimateGas: {
    circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "circulatingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    estimateSendFee(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateSendFee(address,uint16,bytes,uint256)"(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendFrom(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sendFrom(address,uint16,bytes,uint256)"(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    circulatingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "circulatingSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateSendFee(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateSendFee(address,uint16,bytes,uint256)"(
      token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendFrom(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sendFrom(address,uint16,bytes,uint256)"(
      _token: string,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
